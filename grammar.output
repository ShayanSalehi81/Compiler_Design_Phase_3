Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ACTION_pid ID ';'
    7                | type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ACTION_pid ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ACTION_pid ID
   16      | type_specifier ACTION_pid ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | /* empty */

   20 statement_list: statement_list statement
   21               | /* empty */

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt
   28          | output_stmt

   29 expression_stmt: expression ';'
   30                | "break" ACTION_break ';'
   31                | ';'

   32 selection_stmt: "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"

   34 iteration_stmt: "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile

   35 return_stmt: "return" ';'
   36            | "return" expression ';'

   37 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'

   38 case_stmts: case_stmts case_stmt
   39           | /* empty */

   40 case_stmt: "case" ACTION_jumpif ACTION_number NUM ACTION_savecase ':' statement_list

   41 default_stmt: "default" ACTION_jumpif ':' statement_list
   42             | /* empty */

   43 expression: var '=' expression ACTION_assign
   44           | simple_expression

   45 var: ACTION_pid ID
   46    | ACTION_pid ID '[' expression ']' ACTION_array

   47 simple_expression: additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | additive_expression

   49 relop: '<'
   50      | "=="

   51 additive_expression: additive_expression ACTION_sign addop term ACTION_op
   52                    | term

   53 addop: '+'
   54      | '-'

   55 term: term ACTION_sign mulop factor ACTION_op
   56     | factor

   57 mulop: '*'
   58      | '/'

   59 factor: '(' expression ')'
   60       | var
   61       | call
   62       | ACTION_number NUM

   63 call: ACTION_pid ID '(' args ')'

   64 args: arg_list
   65     | /* empty */

   66 arg_list: arg_list ',' expression
   67         | expression

   68 output_stmt: "output" '(' expression ')' ACTION_print ';'

   69 ACTION_assign: /* empty */

   70 ACTION_pid: /* empty */

   71 ACTION_number: /* empty */

   72 ACTION_save: /* empty */

   73 ACTION_label: /* empty */

   74 ACTION_savejump: /* empty */

   75 ACTION_savecase: /* empty */

   76 ACTION_jump: /* empty */

   77 ACTION_loopwhile: /* empty */

   78 ACTION_op: /* empty */

   79 ACTION_sign: /* empty */

   80 ACTION_jumpif: /* empty */

   81 ACTION_array: /* empty */

   82 ACTION_print: /* empty */

   83 ACTION_break: /* empty */


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 32 33 34 37 59 63 68
')' (41) 10 32 33 34 37 59 63 68
'*' (42) 57
'+' (43) 53
',' (44) 13 66
'-' (45) 54
'/' (47) 58
':' (58) 40 41
';' (59) 6 7 29 30 31 35 36 68
'<' (60) 49
'=' (61) 43
'[' (91) 7 16 46
']' (93) 7 16 46
'{' (123) 17 37
'}' (125) 17 37
error (256)
NUM (258) 7 40 62
ID (259) 6 7 10 15 16 45 46 63
"int" (260) 8
"void" (261) 9 12
"break" (262) 30
"if" (263) 32 33
"endif" (264) 32 33
"else" (265) 33
"while" (266) 34
"return" (267) 35 36
"switch" (268) 37
"case" (269) 40
"default" (270) 41
"==" (271) 50
"output" (272) 68


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
declaration_list (35)
    on left: 2 3, on right: 1 2
declaration (36)
    on left: 4 5, on right: 2 3
var_declaration (37)
    on left: 6 7, on right: 4 18
type_specifier (38)
    on left: 8 9, on right: 6 7 10 15 16
fun_declaration (39)
    on left: 10, on right: 5
params (40)
    on left: 11 12, on right: 10
param_list (41)
    on left: 13 14, on right: 11 13
param (42)
    on left: 15 16, on right: 13 14
compound_stmt (43)
    on left: 17, on right: 10 23
local_declarations (44)
    on left: 18 19, on right: 17 18
statement_list (45)
    on left: 20 21, on right: 17 20 40 41
statement (46)
    on left: 22 23 24 25 26 27 28, on right: 20 32 33 34
expression_stmt (47)
    on left: 29 30 31, on right: 22
selection_stmt (48)
    on left: 32 33, on right: 24
iteration_stmt (49)
    on left: 34, on right: 25
return_stmt (50)
    on left: 35 36, on right: 26
switch_stmt (51)
    on left: 37, on right: 27
case_stmts (52)
    on left: 38 39, on right: 37 38
case_stmt (53)
    on left: 40, on right: 38
default_stmt (54)
    on left: 41 42, on right: 37
expression (55)
    on left: 43 44, on right: 29 32 33 34 36 37 43 46 59 66 67 68
var (56)
    on left: 45 46, on right: 43 60
simple_expression (57)
    on left: 47 48, on right: 44
relop (58)
    on left: 49 50, on right: 47
additive_expression (59)
    on left: 51 52, on right: 47 48 51
addop (60)
    on left: 53 54, on right: 51
term (61)
    on left: 55 56, on right: 51 52 55
mulop (62)
    on left: 57 58, on right: 55
factor (63)
    on left: 59 60 61 62, on right: 55 56
call (64)
    on left: 63, on right: 61
args (65)
    on left: 64 65, on right: 63
arg_list (66)
    on left: 66 67, on right: 64 66
output_stmt (67)
    on left: 68, on right: 28
ACTION_assign (68)
    on left: 69, on right: 43
ACTION_pid (69)
    on left: 70, on right: 6 7 10 15 16 45 46 63
ACTION_number (70)
    on left: 71, on right: 7 40 62
ACTION_save (71)
    on left: 72, on right: 32 33 34
ACTION_label (72)
    on left: 73, on right: 34
ACTION_savejump (73)
    on left: 74, on right: 33
ACTION_savecase (74)
    on left: 75, on right: 40
ACTION_jump (75)
    on left: 76, on right: 33
ACTION_loopwhile (76)
    on left: 77, on right: 34
ACTION_op (77)
    on left: 78, on right: 47 51 55
ACTION_sign (78)
    on left: 79, on right: 47 51 55
ACTION_jumpif (79)
    on left: 80, on right: 32 40 41
ACTION_array (80)
    on left: 81, on right: 7 46
ACTION_print (81)
    on left: 82, on right: 68
ACTION_break (82)
    on left: 83, on right: 30


state 0

    0 $accept: . program $end
    1 program: . declaration_list
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier ACTION_pid ID ';'
    7                | . type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier ACTION_pid ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


state 1

    8 type_specifier: "int" .

    $default  reduce using rule 8 (type_specifier)


state 2

    9 type_specifier: "void" .

    $default  reduce using rule 9 (type_specifier)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: declaration_list .  [$end]
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier ACTION_pid ID ';'
    7                | . type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier ACTION_pid ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


state 5

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    6 var_declaration: type_specifier . ACTION_pid ID ';'
    7                | type_specifier . ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'
   10 fun_declaration: type_specifier . ACTION_pid ID '(' params ')' compound_stmt
   70 ACTION_pid: .

    $default  reduce using rule 70 (ACTION_pid)

    ACTION_pid  go to state 11


state 8

    5 declaration: fun_declaration .

    $default  reduce using rule 5 (declaration)


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 11

    6 var_declaration: type_specifier ACTION_pid . ID ';'
    7                | type_specifier ACTION_pid . ID '[' ACTION_number NUM ']' ACTION_array ';'
   10 fun_declaration: type_specifier ACTION_pid . ID '(' params ')' compound_stmt

    ID  shift, and go to state 12


state 12

    6 var_declaration: type_specifier ACTION_pid ID . ';'
    7                | type_specifier ACTION_pid ID . '[' ACTION_number NUM ']' ACTION_array ';'
   10 fun_declaration: type_specifier ACTION_pid ID . '(' params ')' compound_stmt

    ';'  shift, and go to state 13
    '['  shift, and go to state 14
    '('  shift, and go to state 15


state 13

    6 var_declaration: type_specifier ACTION_pid ID ';' .

    $default  reduce using rule 6 (var_declaration)


state 14

    7 var_declaration: type_specifier ACTION_pid ID '[' . ACTION_number NUM ']' ACTION_array ';'
   71 ACTION_number: .

    $default  reduce using rule 71 (ACTION_number)

    ACTION_number  go to state 16


state 15

    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: type_specifier ACTION_pid ID '(' . params ')' compound_stmt
   11 params: . param_list
   12       | . "void"
   13 param_list: . param_list ',' param
   14           | . param
   15 param: . type_specifier ACTION_pid ID
   16      | . type_specifier ACTION_pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 17

    type_specifier  go to state 18
    params          go to state 19
    param_list      go to state 20
    param           go to state 21


state 16

    7 var_declaration: type_specifier ACTION_pid ID '[' ACTION_number . NUM ']' ACTION_array ';'

    NUM  shift, and go to state 22


state 17

    9 type_specifier: "void" .  [ID]
   12 params: "void" .  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


state 18

   15 param: type_specifier . ACTION_pid ID
   16      | type_specifier . ACTION_pid ID '[' ']'
   70 ACTION_pid: .

    $default  reduce using rule 70 (ACTION_pid)

    ACTION_pid  go to state 23


state 19

   10 fun_declaration: type_specifier ACTION_pid ID '(' params . ')' compound_stmt

    ')'  shift, and go to state 24


state 20

   11 params: param_list .  [')']
   13 param_list: param_list . ',' param

    ','  shift, and go to state 25

    $default  reduce using rule 11 (params)


state 21

   14 param_list: param .

    $default  reduce using rule 14 (param_list)


state 22

    7 var_declaration: type_specifier ACTION_pid ID '[' ACTION_number NUM . ']' ACTION_array ';'

    ']'  shift, and go to state 26


state 23

   15 param: type_specifier ACTION_pid . ID
   16      | type_specifier ACTION_pid . ID '[' ']'

    ID  shift, and go to state 27


state 24

   10 fun_declaration: type_specifier ACTION_pid ID '(' params ')' . compound_stmt
   17 compound_stmt: . '{' local_declarations statement_list '}'

    '{'  shift, and go to state 28

    compound_stmt  go to state 29


state 25

    8 type_specifier: . "int"
    9               | . "void"
   13 param_list: param_list ',' . param
   15 param: . type_specifier ACTION_pid ID
   16      | . type_specifier ACTION_pid ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 18
    param           go to state 30


state 26

    7 var_declaration: type_specifier ACTION_pid ID '[' ACTION_number NUM ']' . ACTION_array ';'
   81 ACTION_array: .

    $default  reduce using rule 81 (ACTION_array)

    ACTION_array  go to state 31


state 27

   15 param: type_specifier ACTION_pid ID .  [')', ',']
   16      | type_specifier ACTION_pid ID . '[' ']'

    '['  shift, and go to state 32

    $default  reduce using rule 15 (param)


state 28

   17 compound_stmt: '{' . local_declarations statement_list '}'
   18 local_declarations: . local_declarations var_declaration
   19                   | .

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 33


state 29

   10 fun_declaration: type_specifier ACTION_pid ID '(' params ')' compound_stmt .

    $default  reduce using rule 10 (fun_declaration)


state 30

   13 param_list: param_list ',' param .

    $default  reduce using rule 13 (param_list)


state 31

    7 var_declaration: type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array . ';'

    ';'  shift, and go to state 34


state 32

   16 param: type_specifier ACTION_pid ID '[' . ']'

    ']'  shift, and go to state 35


state 33

    6 var_declaration: . type_specifier ACTION_pid ID ';'
    7                | . type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'
    8 type_specifier: . "int"
    9               | . "void"
   17 compound_stmt: '{' local_declarations . statement_list '}'
   18 local_declarations: local_declarations . var_declaration
   20 statement_list: . statement_list statement
   21               | .  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 36
    type_specifier   go to state 37
    statement_list   go to state 38


state 34

    7 var_declaration: type_specifier ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';' .

    $default  reduce using rule 7 (var_declaration)


state 35

   16 param: type_specifier ACTION_pid ID '[' ']' .

    $default  reduce using rule 16 (param)


state 36

   18 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 18 (local_declarations)


state 37

    6 var_declaration: type_specifier . ACTION_pid ID ';'
    7                | type_specifier . ACTION_pid ID '[' ACTION_number NUM ']' ACTION_array ';'
   70 ACTION_pid: .

    $default  reduce using rule 70 (ACTION_pid)

    ACTION_pid  go to state 39


state 38

   17 compound_stmt: . '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list . '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    '}'       shift, and go to state 42
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 39

    6 var_declaration: type_specifier ACTION_pid . ID ';'
    7                | type_specifier ACTION_pid . ID '[' ACTION_number NUM ']' ACTION_array ';'

    ID  shift, and go to state 66


state 40

   31 expression_stmt: ';' .

    $default  reduce using rule 31 (expression_stmt)


state 41

   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   59       | '(' . expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 67
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 42

   17 compound_stmt: '{' local_declarations statement_list '}' .

    $default  reduce using rule 17 (compound_stmt)


state 43

   30 expression_stmt: "break" . ACTION_break ';'
   83 ACTION_break: .

    $default  reduce using rule 83 (ACTION_break)

    ACTION_break  go to state 68


state 44

   32 selection_stmt: "if" . '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | "if" . '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"

    '('  shift, and go to state 69


state 45

   34 iteration_stmt: "while" . ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   73 ACTION_label: .

    $default  reduce using rule 73 (ACTION_label)

    ACTION_label  go to state 70


state 46

   35 return_stmt: "return" . ';'
   36            | "return" . expression ';'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'  shift, and go to state 71
    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 72
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 47

   37 switch_stmt: "switch" . '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 73


state 48

   68 output_stmt: "output" . '(' expression ')' ACTION_print ';'

    '('  shift, and go to state 74


state 49

   23 statement: compound_stmt .

    $default  reduce using rule 23 (statement)


state 50

   20 statement_list: statement_list statement .

    $default  reduce using rule 20 (statement_list)


state 51

   22 statement: expression_stmt .

    $default  reduce using rule 22 (statement)


state 52

   24 statement: selection_stmt .

    $default  reduce using rule 24 (statement)


state 53

   25 statement: iteration_stmt .

    $default  reduce using rule 25 (statement)


state 54

   26 statement: return_stmt .

    $default  reduce using rule 26 (statement)


state 55

   27 statement: switch_stmt .

    $default  reduce using rule 27 (statement)


state 56

   29 expression_stmt: expression . ';'

    ';'  shift, and go to state 75


state 57

   43 expression: var . '=' expression ACTION_assign
   60 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 76

    $default  reduce using rule 60 (factor)


state 58

   44 expression: simple_expression .

    $default  reduce using rule 44 (expression)


state 59

   47 simple_expression: additive_expression . ACTION_sign relop additive_expression ACTION_op
   48                  | additive_expression .  [';', ']', ')', ',']
   51 additive_expression: additive_expression . ACTION_sign addop term ACTION_op
   79 ACTION_sign: .  ['<', "==", '+', '-']

    '<'       reduce using rule 79 (ACTION_sign)
    "=="      reduce using rule 79 (ACTION_sign)
    '+'       reduce using rule 79 (ACTION_sign)
    '-'       reduce using rule 79 (ACTION_sign)
    $default  reduce using rule 48 (simple_expression)

    ACTION_sign  go to state 77


state 60

   52 additive_expression: term .  [';', ']', ')', ',', '<', "==", '+', '-']
   55 term: term . ACTION_sign mulop factor ACTION_op
   79 ACTION_sign: .  ['*', '/']

    '*'       reduce using rule 79 (ACTION_sign)
    '/'       reduce using rule 79 (ACTION_sign)
    $default  reduce using rule 52 (additive_expression)

    ACTION_sign  go to state 78


state 61

   56 term: factor .

    $default  reduce using rule 56 (term)


state 62

   61 factor: call .

    $default  reduce using rule 61 (factor)


state 63

   28 statement: output_stmt .

    $default  reduce using rule 28 (statement)


state 64

   45 var: ACTION_pid . ID
   46    | ACTION_pid . ID '[' expression ']' ACTION_array
   63 call: ACTION_pid . ID '(' args ')'

    ID  shift, and go to state 79


state 65

   62 factor: ACTION_number . NUM

    NUM  shift, and go to state 80


state 66

    6 var_declaration: type_specifier ACTION_pid ID . ';'
    7                | type_specifier ACTION_pid ID . '[' ACTION_number NUM ']' ACTION_array ';'

    ';'  shift, and go to state 13
    '['  shift, and go to state 14


state 67

   59 factor: '(' expression . ')'

    ')'  shift, and go to state 81


state 68

   30 expression_stmt: "break" ACTION_break . ';'

    ';'  shift, and go to state 82


state 69

   32 selection_stmt: "if" '(' . expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | "if" '(' . expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 83
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 70

   34 iteration_stmt: "while" ACTION_label . '(' expression ')' ACTION_save statement ACTION_loopwhile

    '('  shift, and go to state 84


state 71

   35 return_stmt: "return" ';' .

    $default  reduce using rule 35 (return_stmt)


state 72

   36 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 85


state 73

   37 switch_stmt: "switch" '(' . expression ')' '{' case_stmts default_stmt '}'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 86
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 74

   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: "output" '(' . expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 87
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 75

   29 expression_stmt: expression ';' .

    $default  reduce using rule 29 (expression_stmt)


state 76

   43 expression: . var '=' expression ACTION_assign
   43           | var '=' . expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 88
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 77

   47 simple_expression: additive_expression ACTION_sign . relop additive_expression ACTION_op
   49 relop: . '<'
   50      | . "=="
   51 additive_expression: additive_expression ACTION_sign . addop term ACTION_op
   53 addop: . '+'
   54      | . '-'

    '<'   shift, and go to state 89
    "=="  shift, and go to state 90
    '+'   shift, and go to state 91
    '-'   shift, and go to state 92

    relop  go to state 93
    addop  go to state 94


state 78

   55 term: term ACTION_sign . mulop factor ACTION_op
   57 mulop: . '*'
   58      | . '/'

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96

    mulop  go to state 97


state 79

   45 var: ACTION_pid ID .  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   46    | ACTION_pid ID . '[' expression ']' ACTION_array
   63 call: ACTION_pid ID . '(' args ')'

    '['  shift, and go to state 98
    '('  shift, and go to state 99

    $default  reduce using rule 45 (var)


state 80

   62 factor: ACTION_number NUM .

    $default  reduce using rule 62 (factor)


state 81

   59 factor: '(' expression ')' .

    $default  reduce using rule 59 (factor)


state 82

   30 expression_stmt: "break" ACTION_break ';' .

    $default  reduce using rule 30 (expression_stmt)


state 83

   32 selection_stmt: "if" '(' expression . ')' ACTION_save statement "endif" ACTION_jumpif
   33               | "if" '(' expression . ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"

    ')'  shift, and go to state 100


state 84

   34 iteration_stmt: "while" ACTION_label '(' . expression ')' ACTION_save statement ACTION_loopwhile
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 101
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 85

   36 return_stmt: "return" expression ';' .

    $default  reduce using rule 36 (return_stmt)


state 86

   37 switch_stmt: "switch" '(' expression . ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 102


state 87

   68 output_stmt: "output" '(' expression . ')' ACTION_print ';'

    ')'  shift, and go to state 103


state 88

   43 expression: var '=' expression . ACTION_assign
   69 ACTION_assign: .

    $default  reduce using rule 69 (ACTION_assign)

    ACTION_assign  go to state 104


state 89

   49 relop: '<' .

    $default  reduce using rule 49 (relop)


state 90

   50 relop: "==" .

    $default  reduce using rule 50 (relop)


state 91

   53 addop: '+' .

    $default  reduce using rule 53 (addop)


state 92

   54 addop: '-' .

    $default  reduce using rule 54 (addop)


state 93

   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: additive_expression ACTION_sign relop . additive_expression ACTION_op
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    var                  go to state 105
    additive_expression  go to state 106
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 94

   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   51 additive_expression: additive_expression ACTION_sign addop . term ACTION_op
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    var            go to state 105
    term           go to state 107
    factor         go to state 61
    call           go to state 62
    ACTION_pid     go to state 64
    ACTION_number  go to state 65


state 95

   57 mulop: '*' .

    $default  reduce using rule 57 (mulop)


state 96

   58 mulop: '/' .

    $default  reduce using rule 58 (mulop)


state 97

   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   55 term: term ACTION_sign mulop . factor ACTION_op
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    var            go to state 105
    factor         go to state 108
    call           go to state 62
    ACTION_pid     go to state 64
    ACTION_number  go to state 65


state 98

   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   46    | ACTION_pid ID '[' . expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 109
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 99

   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   63     | ACTION_pid ID '(' . args ')'
   64 args: . arg_list
   65     | .  [')']
   66 arg_list: . arg_list ',' expression
   67         | . expression
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    ID        reduce using rule 70 (ACTION_pid)
    $default  reduce using rule 65 (args)

    expression           go to state 110
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    args                 go to state 111
    arg_list             go to state 112
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 100

   32 selection_stmt: "if" '(' expression ')' . ACTION_save statement "endif" ACTION_jumpif
   33               | "if" '(' expression ')' . ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   72 ACTION_save: .

    $default  reduce using rule 72 (ACTION_save)

    ACTION_save  go to state 113


state 101

   34 iteration_stmt: "while" ACTION_label '(' expression . ')' ACTION_save statement ACTION_loopwhile

    ')'  shift, and go to state 114


state 102

   37 switch_stmt: "switch" '(' expression ')' . '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 115


state 103

   68 output_stmt: "output" '(' expression ')' . ACTION_print ';'
   82 ACTION_print: .

    $default  reduce using rule 82 (ACTION_print)

    ACTION_print  go to state 116


state 104

   43 expression: var '=' expression ACTION_assign .

    $default  reduce using rule 43 (expression)


state 105

   60 factor: var .

    $default  reduce using rule 60 (factor)


state 106

   47 simple_expression: additive_expression ACTION_sign relop additive_expression . ACTION_op
   51 additive_expression: additive_expression . ACTION_sign addop term ACTION_op
   78 ACTION_op: .  [';', ']', ')', ',']
   79 ACTION_sign: .  ['+', '-']

    '+'       reduce using rule 79 (ACTION_sign)
    '-'       reduce using rule 79 (ACTION_sign)
    $default  reduce using rule 78 (ACTION_op)

    ACTION_op    go to state 117
    ACTION_sign  go to state 118


state 107

   51 additive_expression: additive_expression ACTION_sign addop term . ACTION_op
   55 term: term . ACTION_sign mulop factor ACTION_op
   78 ACTION_op: .  [';', ']', ')', ',', '<', "==", '+', '-']
   79 ACTION_sign: .  ['*', '/']

    '*'       reduce using rule 79 (ACTION_sign)
    '/'       reduce using rule 79 (ACTION_sign)
    $default  reduce using rule 78 (ACTION_op)

    ACTION_op    go to state 119
    ACTION_sign  go to state 78


state 108

   55 term: term ACTION_sign mulop factor . ACTION_op
   78 ACTION_op: .

    $default  reduce using rule 78 (ACTION_op)

    ACTION_op  go to state 120


state 109

   46 var: ACTION_pid ID '[' expression . ']' ACTION_array

    ']'  shift, and go to state 121


state 110

   67 arg_list: expression .

    $default  reduce using rule 67 (arg_list)


state 111

   63 call: ACTION_pid ID '(' args . ')'

    ')'  shift, and go to state 122


state 112

   64 args: arg_list .  [')']
   66 arg_list: arg_list . ',' expression

    ','  shift, and go to state 123

    $default  reduce using rule 64 (args)


state 113

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   32               | "if" '(' expression ')' ACTION_save . statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   33               | "if" '(' expression ')' ACTION_save . statement "else" ACTION_savejump statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    compound_stmt        go to state 49
    statement            go to state 124
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 114

   34 iteration_stmt: "while" ACTION_label '(' expression ')' . ACTION_save statement ACTION_loopwhile
   72 ACTION_save: .

    $default  reduce using rule 72 (ACTION_save)

    ACTION_save  go to state 125


state 115

   37 switch_stmt: "switch" '(' expression ')' '{' . case_stmts default_stmt '}'
   38 case_stmts: . case_stmts case_stmt
   39           | .

    $default  reduce using rule 39 (case_stmts)

    case_stmts  go to state 126


state 116

   68 output_stmt: "output" '(' expression ')' ACTION_print . ';'

    ';'  shift, and go to state 127


state 117

   47 simple_expression: additive_expression ACTION_sign relop additive_expression ACTION_op .

    $default  reduce using rule 47 (simple_expression)


state 118

   51 additive_expression: additive_expression ACTION_sign . addop term ACTION_op
   53 addop: . '+'
   54      | . '-'

    '+'  shift, and go to state 91
    '-'  shift, and go to state 92

    addop  go to state 94


state 119

   51 additive_expression: additive_expression ACTION_sign addop term ACTION_op .

    $default  reduce using rule 51 (additive_expression)


state 120

   55 term: term ACTION_sign mulop factor ACTION_op .

    $default  reduce using rule 55 (term)


state 121

   46 var: ACTION_pid ID '[' expression ']' . ACTION_array
   81 ACTION_array: .

    $default  reduce using rule 81 (ACTION_array)

    ACTION_array  go to state 128


state 122

   63 call: ACTION_pid ID '(' args ')' .

    $default  reduce using rule 63 (call)


state 123

   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   66 arg_list: arg_list ',' . expression
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    '('  shift, and go to state 41

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    expression           go to state 129
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 124

   32 selection_stmt: "if" '(' expression ')' ACTION_save statement . "endif" ACTION_jumpif
   33               | "if" '(' expression ')' ACTION_save statement . "else" ACTION_savejump statement ACTION_jump "endif"

    "endif"  shift, and go to state 130
    "else"   shift, and go to state 131


state 125

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   34               | "while" ACTION_label '(' expression ')' ACTION_save . statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    compound_stmt        go to state 49
    statement            go to state 132
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 126

   37 switch_stmt: "switch" '(' expression ')' '{' case_stmts . default_stmt '}'
   38 case_stmts: case_stmts . case_stmt
   40 case_stmt: . "case" ACTION_jumpif ACTION_number NUM ACTION_savecase ':' statement_list
   41 default_stmt: . "default" ACTION_jumpif ':' statement_list
   42             | .  ['}']

    "case"     shift, and go to state 133
    "default"  shift, and go to state 134

    $default  reduce using rule 42 (default_stmt)

    case_stmt     go to state 135
    default_stmt  go to state 136


state 127

   68 output_stmt: "output" '(' expression ')' ACTION_print ';' .

    $default  reduce using rule 68 (output_stmt)


state 128

   46 var: ACTION_pid ID '[' expression ']' ACTION_array .

    $default  reduce using rule 46 (var)


state 129

   66 arg_list: arg_list ',' expression .

    $default  reduce using rule 66 (arg_list)


state 130

   32 selection_stmt: "if" '(' expression ')' ACTION_save statement "endif" . ACTION_jumpif
   80 ACTION_jumpif: .

    $default  reduce using rule 80 (ACTION_jumpif)

    ACTION_jumpif  go to state 137


state 131

   33 selection_stmt: "if" '(' expression ')' ACTION_save statement "else" . ACTION_savejump statement ACTION_jump "endif"
   74 ACTION_savejump: .

    $default  reduce using rule 74 (ACTION_savejump)

    ACTION_savejump  go to state 138


state 132

   34 iteration_stmt: "while" ACTION_label '(' expression ')' ACTION_save statement . ACTION_loopwhile
   77 ACTION_loopwhile: .

    $default  reduce using rule 77 (ACTION_loopwhile)

    ACTION_loopwhile  go to state 139


state 133

   40 case_stmt: "case" . ACTION_jumpif ACTION_number NUM ACTION_savecase ':' statement_list
   80 ACTION_jumpif: .

    $default  reduce using rule 80 (ACTION_jumpif)

    ACTION_jumpif  go to state 140


state 134

   41 default_stmt: "default" . ACTION_jumpif ':' statement_list
   80 ACTION_jumpif: .

    $default  reduce using rule 80 (ACTION_jumpif)

    ACTION_jumpif  go to state 141


state 135

   38 case_stmts: case_stmts case_stmt .

    $default  reduce using rule 38 (case_stmts)


state 136

   37 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt . '}'

    '}'  shift, and go to state 142


state 137

   32 selection_stmt: "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif .

    $default  reduce using rule 32 (selection_stmt)


state 138

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   33               | "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump . statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    $default  reduce using rule 70 (ACTION_pid)

    compound_stmt        go to state 49
    statement            go to state 143
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 139

   34 iteration_stmt: "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile .

    $default  reduce using rule 34 (iteration_stmt)


state 140

   40 case_stmt: "case" ACTION_jumpif . ACTION_number NUM ACTION_savecase ':' statement_list
   71 ACTION_number: .

    $default  reduce using rule 71 (ACTION_number)

    ACTION_number  go to state 144


state 141

   41 default_stmt: "default" ACTION_jumpif . ':' statement_list

    ':'  shift, and go to state 145


state 142

   37 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' .

    $default  reduce using rule 37 (switch_stmt)


state 143

   33 selection_stmt: "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement . ACTION_jump "endif"
   76 ACTION_jump: .

    $default  reduce using rule 76 (ACTION_jump)

    ACTION_jump  go to state 146


state 144

   40 case_stmt: "case" ACTION_jumpif ACTION_number . NUM ACTION_savecase ':' statement_list

    NUM  shift, and go to state 147


state 145

   20 statement_list: . statement_list statement
   21               | .
   41 default_stmt: "default" ACTION_jumpif ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 148


state 146

   33 selection_stmt: "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump . "endif"

    "endif"  shift, and go to state 149


state 147

   40 case_stmt: "case" ACTION_jumpif ACTION_number NUM . ACTION_savecase ':' statement_list
   75 ACTION_savecase: .

    $default  reduce using rule 75 (ACTION_savecase)

    ACTION_savecase  go to state 150


state 148

   17 compound_stmt: . '{' local_declarations statement_list '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   41 default_stmt: "default" ACTION_jumpif ':' statement_list .  ['}']
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    ID        reduce using rule 70 (ACTION_pid)
    $default  reduce using rule 41 (default_stmt)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65


state 149

   33 selection_stmt: "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif" .

    $default  reduce using rule 33 (selection_stmt)


state 150

   40 case_stmt: "case" ACTION_jumpif ACTION_number NUM ACTION_savecase . ':' statement_list

    ':'  shift, and go to state 151


state 151

   20 statement_list: . statement_list statement
   21               | .
   40 case_stmt: "case" ACTION_jumpif ACTION_number NUM ACTION_savecase ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 152


state 152

   17 compound_stmt: . '{' local_declarations statement_list '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';'
   30                | . "break" ACTION_break ';'
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' ACTION_save statement "endif" ACTION_jumpif
   33               | . "if" '(' expression ')' ACTION_save statement "else" ACTION_savejump statement ACTION_jump "endif"
   34 iteration_stmt: . "while" ACTION_label '(' expression ')' ACTION_save statement ACTION_loopwhile
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   40 case_stmt: "case" ACTION_jumpif ACTION_number NUM ACTION_savecase ':' statement_list .  ['}', "case", "default"]
   43 expression: . var '=' expression ACTION_assign
   44           | . simple_expression
   45 var: . ACTION_pid ID
   46    | . ACTION_pid ID '[' expression ']' ACTION_array
   47 simple_expression: . additive_expression ACTION_sign relop additive_expression ACTION_op
   48                  | . additive_expression
   51 additive_expression: . additive_expression ACTION_sign addop term ACTION_op
   52                    | . term
   55 term: . term ACTION_sign mulop factor ACTION_op
   56     | . factor
   59 factor: . '(' expression ')'
   60       | . var
   61       | . call
   62       | . ACTION_number NUM
   63 call: . ACTION_pid ID '(' args ')'
   68 output_stmt: . "output" '(' expression ')' ACTION_print ';'
   70 ACTION_pid: .  [ID]
   71 ACTION_number: .  [NUM]

    ';'       shift, and go to state 40
    '('       shift, and go to state 41
    '{'       shift, and go to state 28
    "break"   shift, and go to state 43
    "if"      shift, and go to state 44
    "while"   shift, and go to state 45
    "return"  shift, and go to state 46
    "switch"  shift, and go to state 47
    "output"  shift, and go to state 48

    NUM       reduce using rule 71 (ACTION_number)
    ID        reduce using rule 70 (ACTION_pid)
    $default  reduce using rule 40 (case_stmt)

    compound_stmt        go to state 49
    statement            go to state 50
    expression_stmt      go to state 51
    selection_stmt       go to state 52
    iteration_stmt       go to state 53
    return_stmt          go to state 54
    switch_stmt          go to state 55
    expression           go to state 56
    var                  go to state 57
    simple_expression    go to state 58
    additive_expression  go to state 59
    term                 go to state 60
    factor               go to state 61
    call                 go to state 62
    output_stmt          go to state 63
    ACTION_pid           go to state 64
    ACTION_number        go to state 65
